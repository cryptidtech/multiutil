// SPDX-License-Idnetifier: Apache-2.0
/// Errors generated by the numeric type impls
#[derive(Clone, Debug, thiserror::Error)]
#[non_exhaustive]
pub enum Error {
    /// Multitrait decode error
    #[error(transparent)]
    Multitrait(#[from] multitrait::Error),
    /// Multicodec decode error
    #[error(transparent)]
    Multicodec(#[from] multicodec::Error),
    /// BaseEncoded error
    #[error(transparent)]
    BaseEncoded(#[from] BaseEncodedError),
    /// BaseEncoder error
    #[error(transparent)]
    BaseEncoder(#[from] BaseEncoderError),
    /// Custom error for inner types to use when nothing else works
    #[error("Custom error: {0}")]
    Custom(String),
}

impl Error {
    /// create a custom error instance
    pub fn custom(s: &str) -> Self {
        Error::Custom(s.to_string())
    }
}

/// Errors generated by the base encoding smart pointer
#[derive(Clone, Debug, thiserror::Error)]
#[non_exhaustive]
pub enum BaseEncodedError {
    /// BaseEncoder error
    #[error(transparent)]
    BaseEncoder(#[from] BaseEncoderError),
    /// Value decoding failed
    #[error("Failed to decode the tagged value")]
    ValueFailed,
}

/// Errors generated by the base encoding smart pointer
#[derive(Clone, Debug, thiserror::Error)]
#[non_exhaustive]
pub enum BaseEncoderError {
    /// Multibase decode error
    #[error(transparent)]
    Multibase(#[from] multibase::Error),

    /// Base58 decode error
    #[error("Base58 error: {0}")]
    Base58(String),
}
